/* eslint-disable */
/**
 * Generated by orval
 * Do not edit manually. Run "npm run generate-client" instead.
 * Airbyte Configuration API
 * Airbyte Configuration API
[https://airbyte.io](https://airbyte.io).

This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.

Here are some conventions that this API follows:
* All endpoints are http POST methods.
* All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
* The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`.
* For all `update` methods, the whole object must be passed in, even the fields that did not change.

Change Management:
* The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create`
* Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests.
* All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):
  * Adding fields to request or response bodies.
  * Adding new HTTP endpoints.
* All `web_backend` APIs are not considered public APIs and are not guaranteeing backwards compatibility.

 * OpenAPI spec version: 1.0.0
 */
import type {
  WorkspaceRead,
  WorkspaceCreate,
  WorkspaceIdRequestBody,
  WorkspaceReadList,
  SlugRequestBody,
  WorkspaceUpdate,
  WorkspaceUpdateName,
  WorkspaceGiveFeedback,
  NotificationRead,
  Notification,
  SourceDefinitionRead,
  SourceDefinitionCreate,
  SourceDefinitionUpdate,
  SourceDefinitionReadList,
  SourceDefinitionIdRequestBody,
  PrivateSourceDefinitionReadList,
  CustomSourceDefinitionCreate,
  SourceDefinitionIdWithWorkspaceId,
  CustomSourceDefinitionUpdate,
  PrivateSourceDefinitionRead,
  SourceDefinitionSpecificationRead,
  SourceRead,
  SourceCreate,
  SourceUpdate,
  SourceReadList,
  SourceIdRequestBody,
  SourceSearch,
  SourceCloneRequestBody,
  CheckConnectionRead,
  SourceDiscoverSchemaRead,
  SourceDiscoverSchemaRequestBody,
  DestinationDefinitionRead,
  DestinationDefinitionCreate,
  DestinationDefinitionUpdate,
  DestinationDefinitionReadList,
  DestinationDefinitionIdRequestBody,
  PrivateDestinationDefinitionReadList,
  CustomDestinationDefinitionCreate,
  DestinationDefinitionIdWithWorkspaceId,
  CustomDestinationDefinitionUpdate,
  PrivateDestinationDefinitionRead,
  DestinationDefinitionSpecificationRead,
  DestinationRead,
  DestinationCreate,
  DestinationUpdate,
  DestinationReadList,
  DestinationIdRequestBody,
  DestinationSearch,
  DestinationCloneRequestBody,
  ConnectionRead,
  ConnectionCreate,
  ConnectionUpdate,
  ConnectionReadList,
  ConnectionIdRequestBody,
  ConnectionState,
  ConnectionSearch,
  JobInfoRead,
  CheckOperationRead,
  OperatorConfiguration,
  OperationRead,
  OperationCreate,
  OperationUpdate,
  OperationReadList,
  OperationIdRequestBody,
  SourceCoreConfig,
  DestinationCoreConfig,
  DbMigrationReadList,
  DbMigrationRequestBody,
  DbMigrationExecutionRead,
  SetInstancewideSourceOauthParamsRequestBody,
  OAuthConsentRead,
  SourceOauthConsentRequest,
  CompleteOAuthResponse,
  CompleteSourceOauthRequest,
  DestinationOauthConsentRequest,
  CompleteDestinationOAuthRequest,
  SetInstancewideDestinationOauthParamsRequestBody,
  WebBackendConnectionReadList,
  WebBackendConnectionRead,
  WebBackendConnectionRequestBody,
  WebBackendConnectionCreate,
  WebBackendConnectionUpdate,
  WebBackendConnectionSearch,
  ConnectionStateType,
  WebBackendWorkspaceStateResult,
  WebBackendWorkspaceState,
  JobReadList,
  JobListRequestBody,
  JobIdRequestBody,
  JobDebugInfoRead,
  HealthCheckRead,
  LogsRequestBody,
  AirbyteArchive,
  ImportRead,
  UploadRead,
  ImportRequestBody,
} from './AirbyteApi.schemas';
import { apiOverride } from '../orval/override';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Creates a workspace
 */
export const createWorkspace = (
  workspaceCreate: WorkspaceCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceRead>(
    {
      url: `/v1/workspaces/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceCreate,
    },
    options,
  );
};

/**
 * @summary Deletes a workspace
 */
export const deleteWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/workspaces/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary List all workspaces registered in the current Airbyte deployment
 */
export const listWorkspaces = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceReadList>(
    { url: `/v1/workspaces/list`, method: 'post' },
    options,
  );
};

/**
 * @summary Find workspace by ID
 */
export const getWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceRead>(
    {
      url: `/v1/workspaces/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Find workspace by slug
 */
export const getWorkspaceBySlug = (
  slugRequestBody: SlugRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceRead>(
    {
      url: `/v1/workspaces/get_by_slug`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: slugRequestBody,
    },
    options,
  );
};

/**
 * @summary Update workspace state
 */
export const updateWorkspace = (
  workspaceUpdate: WorkspaceUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceRead>(
    {
      url: `/v1/workspaces/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceUpdate,
    },
    options,
  );
};

/**
 * @summary Update workspace name
 */
export const updateWorkspaceName = (
  workspaceUpdateName: WorkspaceUpdateName,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WorkspaceRead>(
    {
      url: `/v1/workspaces/update_name`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceUpdateName,
    },
    options,
  );
};

/**
 * @summary Update workspace feedback state
 */
export const updateWorkspaceFeedback = (
  workspaceGiveFeedback: WorkspaceGiveFeedback,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/workspaces/tag_feedback_status_as_done`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceGiveFeedback,
    },
    options,
  );
};

/**
 * @summary Try sending a notifications
 */
export const tryNotificationConfig = (
  notification: Notification,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<NotificationRead>(
    {
      url: `/v1/notifications/try`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: notification,
    },
    options,
  );
};

/**
 * @summary Creates a sourceDefinition
 */
export const createSourceDefinition = (
  sourceDefinitionCreate: SourceDefinitionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionCreate,
    },
    options,
  );
};

/**
 * @summary Update a sourceDefinition
 */
export const updateSourceDefinition = (
  sourceDefinitionUpdate: SourceDefinitionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionUpdate,
    },
    options,
  );
};

/**
 * @summary List all the sourceDefinitions the current Airbyte deployment is configured to use
 */
export const listSourceDefinitions = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionReadList>(
    { url: `/v1/source_definitions/list`, method: 'post' },
    options,
  );
};

/**
 * Guaranteed to retrieve the latest information on supported sources.
 * @summary List the latest sourceDefinitions Airbyte supports
 */
export const listLatestSourceDefinitions = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionReadList>(
    { url: `/v1/source_definitions/list_latest`, method: 'post' },
    options,
  );
};

/**
 * @summary Get source
 */
export const getSourceDefinition = (
  sourceDefinitionIdRequestBody: SourceDefinitionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Delete a source definition
 */
export const deleteSourceDefinition = (
  sourceDefinitionIdRequestBody: SourceDefinitionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/source_definitions/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary List all private, non-custom sourceDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace's grants.
 */
export const listPrivateSourceDefinitions = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<PrivateSourceDefinitionReadList>(
    {
      url: `/v1/source_definitions/list_private`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary List all the sourceDefinitions the given workspace is configured to use
 */
export const listSourceDefinitionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionReadList>(
    {
      url: `/v1/source_definitions/list_for_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Creates a custom sourceDefinition for the given workspace
 */
export const createCustomSourceDefinition = (
  customSourceDefinitionCreate: CustomSourceDefinitionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/create_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: customSourceDefinitionCreate,
    },
    options,
  );
};

/**
 * @summary Get a sourceDefinition that is configured for the given workspace
 */
export const getSourceDefinitionForWorkspace = (
  sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/get_for_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Update a custom sourceDefinition for the given workspace
 */
export const updateCustomSourceDefinition = (
  customSourceDefinitionUpdate: CustomSourceDefinitionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionRead>(
    {
      url: `/v1/source_definitions/update_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: customSourceDefinitionUpdate,
    },
    options,
  );
};

/**
 * @summary Delete a custom source definition for the given workspace
 */
export const deleteCustomSourceDefinition = (
  sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/source_definitions/delete_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary grant a private, non-custom sourceDefinition to a given workspace
 */
export const grantSourceDefinitionToWorkspace = (
  sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<PrivateSourceDefinitionRead>(
    {
      url: `/v1/source_definitions/grant_definition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary revoke a grant to a private, non-custom sourceDefinition from a given workspace
 */
export const revokeSourceDefinitionFromWorkspace = (
  sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/source_definitions/revoke_definition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Get specification for a SourceDefinition.
 */
export const getSourceDefinitionSpecification = (
  sourceDefinitionIdWithWorkspaceId: SourceDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDefinitionSpecificationRead>(
    {
      url: `/v1/source_definition_specifications/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Create a source
 */
export const createSource = (
  sourceCreate: SourceCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceRead>(
    {
      url: `/v1/sources/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceCreate,
    },
    options,
  );
};

/**
 * @summary Update a source
 */
export const updateSource = (
  sourceUpdate: SourceUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceRead>(
    {
      url: `/v1/sources/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceUpdate,
    },
    options,
  );
};

/**
 * List sources for workspace. Does not return deleted sources.
 * @summary List sources for workspace
 */
export const listSourcesForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceReadList>(
    {
      url: `/v1/sources/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Get source
 */
export const getSource = (
  sourceIdRequestBody: SourceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceRead>(
    {
      url: `/v1/sources/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Search sources
 */
export const searchSources = (
  sourceSearch: SourceSearch,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceReadList>(
    {
      url: `/v1/sources/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceSearch,
    },
    options,
  );
};

/**
 * @summary Clone source
 */
export const cloneSource = (
  sourceCloneRequestBody: SourceCloneRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceRead>(
    {
      url: `/v1/sources/clone`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceCloneRequestBody,
    },
    options,
  );
};

/**
 * @summary Delete a source
 */
export const deleteSource = (
  sourceIdRequestBody: SourceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/sources/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Check connection to the source
 */
export const checkConnectionToSource = (
  sourceIdRequestBody: SourceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/sources/check_connection`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Check connection for a proposed update to a source
 */
export const checkConnectionToSourceForUpdate = (
  sourceUpdate: SourceUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/sources/check_connection_for_update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceUpdate,
    },
    options,
  );
};

/**
 * @summary Discover the schema catalog of the source
 */
export const discoverSchemaForSource = (
  sourceDiscoverSchemaRequestBody: SourceDiscoverSchemaRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDiscoverSchemaRead>(
    {
      url: `/v1/sources/discover_schema`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceDiscoverSchemaRequestBody,
    },
    options,
  );
};

/**
 * @summary Creates a destinationsDefinition
 */
export const createDestinationDefinition = (
  destinationDefinitionCreate: DestinationDefinitionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionCreate,
    },
    options,
  );
};

/**
 * @summary Update destinationDefinition
 */
export const updateDestinationDefinition = (
  destinationDefinitionUpdate: DestinationDefinitionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionUpdate,
    },
    options,
  );
};

/**
 * @summary List all the destinationDefinitions the current Airbyte deployment is configured to use
 */
export const listDestinationDefinitions = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionReadList>(
    { url: `/v1/destination_definitions/list`, method: 'post' },
    options,
  );
};

/**
 * Guaranteed to retrieve the latest information on supported destinations.
 * @summary List the latest destinationDefinitions Airbyte supports
 */
export const listLatestDestinationDefinitions = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionReadList>(
    { url: `/v1/destination_definitions/list_latest`, method: 'post' },
    options,
  );
};

/**
 * @summary Get destinationDefinition
 */
export const getDestinationDefinition = (
  destinationDefinitionIdRequestBody: DestinationDefinitionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Delete a destination definition
 */
export const deleteDestinationDefinition = (
  destinationDefinitionIdRequestBody: DestinationDefinitionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/destination_definitions/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary List all private, non-custom destinationDefinitions, and for each indicate whether the given workspace has a grant for using the definition. Used by admins to view and modify a given workspace's grants.
 */
export const listPrivateDestinationDefinitions = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<PrivateDestinationDefinitionReadList>(
    {
      url: `/v1/destination_definitions/list_private`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary List all the destinationDefinitions the given workspace is configured to use
 */
export const listDestinationDefinitionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionReadList>(
    {
      url: `/v1/destination_definitions/list_for_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Creates a custom destinationDefinition for the given workspace
 */
export const createCustomDestinationDefinition = (
  customDestinationDefinitionCreate: CustomDestinationDefinitionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/create_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: customDestinationDefinitionCreate,
    },
    options,
  );
};

/**
 * @summary Get a destinationDefinition that is configured for the given workspace
 */
export const getDestinationDefinitionForWorkspace = (
  destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/get_for_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Update a custom destinationDefinition for the given workspace
 */
export const updateCustomDestinationDefinition = (
  customDestinationDefinitionUpdate: CustomDestinationDefinitionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/update_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: customDestinationDefinitionUpdate,
    },
    options,
  );
};

/**
 * @summary Delete a custom destination definition for the given workspace
 */
export const deleteCustomDestinationDefinition = (
  destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/destination_definitions/delete_custom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary grant a private, non-custom destinationDefinition to a given workspace
 */
export const grantDestinationDefinitionToWorkspace = (
  destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<PrivateDestinationDefinitionRead>(
    {
      url: `/v1/destination_definitions/grant_definition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary revoke a grant to a private, non-custom destinationDefinition from a given workspace
 */
export const revokeDestinationDefinitionFromWorkspace = (
  destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/destination_definitions/revoke_definition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Get specification for a destinationDefinition
 */
export const getDestinationDefinitionSpecification = (
  destinationDefinitionIdWithWorkspaceId: DestinationDefinitionIdWithWorkspaceId,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationDefinitionSpecificationRead>(
    {
      url: `/v1/destination_definition_specifications/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationDefinitionIdWithWorkspaceId,
    },
    options,
  );
};

/**
 * @summary Create a destination
 */
export const createDestination = (
  destinationCreate: DestinationCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationRead>(
    {
      url: `/v1/destinations/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationCreate,
    },
    options,
  );
};

/**
 * @summary Update a destination
 */
export const updateDestination = (
  destinationUpdate: DestinationUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationRead>(
    {
      url: `/v1/destinations/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationUpdate,
    },
    options,
  );
};

/**
 * @summary List configured destinations for a workspace
 */
export const listDestinationsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationReadList>(
    {
      url: `/v1/destinations/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Get configured destination
 */
export const getDestination = (
  destinationIdRequestBody: DestinationIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationRead>(
    {
      url: `/v1/destinations/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Search destinations
 */
export const searchDestinations = (
  destinationSearch: DestinationSearch,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationReadList>(
    {
      url: `/v1/destinations/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationSearch,
    },
    options,
  );
};

/**
 * @summary Check connection to the destination
 */
export const checkConnectionToDestination = (
  destinationIdRequestBody: DestinationIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/destinations/check_connection`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Check connection for a proposed update to a destination
 */
export const checkConnectionToDestinationForUpdate = (
  destinationUpdate: DestinationUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/destinations/check_connection_for_update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationUpdate,
    },
    options,
  );
};

/**
 * @summary Delete the destination
 */
export const deleteDestination = (
  destinationIdRequestBody: DestinationIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/destinations/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Clone destination
 */
export const cloneDestination = (
  destinationCloneRequestBody: DestinationCloneRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DestinationRead>(
    {
      url: `/v1/destinations/clone`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationCloneRequestBody,
    },
    options,
  );
};

/**
 * @summary Create a connection between a source and a destination
 */
export const createConnection = (
  connectionCreate: ConnectionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionRead>(
    {
      url: `/v1/connections/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionCreate,
    },
    options,
  );
};

/**
 * @summary Update a connection
 */
export const updateConnection = (
  connectionUpdate: ConnectionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionRead>(
    {
      url: `/v1/connections/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionUpdate,
    },
    options,
  );
};

/**
 * List connections for workspace. Does not return deleted connections.
 * @summary Returns all connections for a workspace.
 */
export const listConnectionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionReadList>(
    {
      url: `/v1/connections/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * List connections for workspace, including deleted connections.
 * @summary Returns all connections for a workspace, including deleted connections.
 */
export const listAllConnectionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionReadList>(
    {
      url: `/v1/connections/list_all`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Get a connection
 */
export const getConnection = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionRead>(
    {
      url: `/v1/connections/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Fetch the current state for a connection.
 */
export const getState = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionState>(
    {
      url: `/v1/state/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Search connections
 */
export const searchConnections = (
  connectionSearch: ConnectionSearch,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionReadList>(
    {
      url: `/v1/connections/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionSearch,
    },
    options,
  );
};

/**
 * @summary Delete a connection
 */
export const deleteConnection = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/connections/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Trigger a manual sync of the connection
 */
export const syncConnection = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobInfoRead>(
    {
      url: `/v1/connections/sync`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
 */
export const resetConnection = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobInfoRead>(
    {
      url: `/v1/connections/reset`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Check if an operation to be created is valid
 */
export const checkOperation = (
  operatorConfiguration: OperatorConfiguration,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckOperationRead>(
    {
      url: `/v1/operations/check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: operatorConfiguration,
    },
    options,
  );
};

/**
 * @summary Create an operation to be applied as part of a connection pipeline
 */
export const createOperation = (
  operationCreate: OperationCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OperationRead>(
    {
      url: `/v1/operations/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: operationCreate,
    },
    options,
  );
};

/**
 * @summary Update an operation
 */
export const updateOperation = (
  operationUpdate: OperationUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OperationRead>(
    {
      url: `/v1/operations/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: operationUpdate,
    },
    options,
  );
};

/**
 * List operations for connection.
 * @summary Returns all operations for a connection.
 */
export const listOperationsForConnection = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OperationReadList>(
    {
      url: `/v1/operations/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Returns an operation
 */
export const getOperation = (
  operationIdRequestBody: OperationIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OperationRead>(
    {
      url: `/v1/operations/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: operationIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Delete an operation
 */
export const deleteOperation = (
  operationIdRequestBody: OperationIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/operations/delete`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: operationIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Run check connection for a given source configuration
 */
export const executeSourceCheckConnection = (
  sourceCoreConfig: SourceCoreConfig,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/scheduler/sources/check_connection`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceCoreConfig,
    },
    options,
  );
};

/**
 * @summary Run discover schema for a given source a source configuration
 */
export const executeSourceDiscoverSchema = (
  sourceCoreConfig: SourceCoreConfig,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<SourceDiscoverSchemaRead>(
    {
      url: `/v1/scheduler/sources/discover_schema`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceCoreConfig,
    },
    options,
  );
};

/**
 * @summary Run check connection for a given destination configuration
 */
export const executeDestinationCheckConnection = (
  destinationCoreConfig: DestinationCoreConfig,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CheckConnectionRead>(
    {
      url: `/v1/scheduler/destinations/check_connection`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationCoreConfig,
    },
    options,
  );
};

/**
 * @summary List all database migrations
 */
export const listMigrations = (
  dbMigrationRequestBody: DbMigrationRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DbMigrationReadList>(
    {
      url: `/v1/db_migrations/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dbMigrationRequestBody,
    },
    options,
  );
};

/**
 * @summary Migrate the database to the latest version
 */
export const executeMigrations = (
  dbMigrationRequestBody: DbMigrationRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<DbMigrationExecutionRead>(
    {
      url: `/v1/db_migrations/migrate`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: dbMigrationRequestBody,
    },
    options,
  );
};

/**
 * @summary Sets instancewide variables to be used for the oauth flow when creating this source. When set, these variables will be injected into a connector's configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company's Google Ads developer_token, client_id, and client_secret without the user having to know about these variables.

 */
export const setInstancewideSourceOauthParams = (
  setInstancewideSourceOauthParamsRequestBody: SetInstancewideSourceOauthParamsRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/source_oauths/oauth_params/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: setInstancewideSourceOauthParamsRequestBody,
    },
    options,
  );
};

/**
 * @summary Given a source connector definition ID, return the URL to the consent screen where to redirect the user to.
 */
export const getSourceOAuthConsent = (
  sourceOauthConsentRequest: SourceOauthConsentRequest,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OAuthConsentRead>(
    {
      url: `/v1/source_oauths/get_consent_url`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sourceOauthConsentRequest,
    },
    options,
  );
};

/**
 * @summary Given a source def ID generate an access/refresh token etc.
 */
export const completeSourceOAuth = (
  completeSourceOauthRequest: CompleteSourceOauthRequest,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CompleteOAuthResponse>(
    {
      url: `/v1/source_oauths/complete_oauth`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: completeSourceOauthRequest,
    },
    options,
  );
};

/**
 * @summary Given a destination connector definition ID, return the URL to the consent screen where to redirect the user to.
 */
export const getDestinationOAuthConsent = (
  destinationOauthConsentRequest: DestinationOauthConsentRequest,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<OAuthConsentRead>(
    {
      url: `/v1/destination_oauths/get_consent_url`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: destinationOauthConsentRequest,
    },
    options,
  );
};

/**
 * @summary Given a destination def ID generate an access/refresh token etc.
 */
export const completeDestinationOAuth = (
  completeDestinationOAuthRequest: CompleteDestinationOAuthRequest,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<CompleteOAuthResponse>(
    {
      url: `/v1/destination_oauths/complete_oauth`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: completeDestinationOAuthRequest,
    },
    options,
  );
};

/**
 * @summary Sets instancewide variables to be used for the oauth flow when creating this destination. When set, these variables will be injected into a connector's configuration before any interaction with the connector image itself. This enables running oauth flows with consistent variables e.g: the company's Google Ads developer_token, client_id, and client_secret without the user having to know about these variables.

 */
export const setInstancewideDestinationOauthParams = (
  setInstancewideDestinationOauthParamsRequestBody: SetInstancewideDestinationOauthParamsRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<void>(
    {
      url: `/v1/destination_oauths/oauth_params/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: setInstancewideDestinationOauthParamsRequestBody,
    },
    options,
  );
};

/**
 * @summary Returns all non-deleted connections for a workspace.
 */
export const webBackendListConnectionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionReadList>(
    {
      url: `/v1/web_backend/connections/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Returns all connections for a workspace.
 */
export const webBackendListAllConnectionsForWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionReadList>(
    {
      url: `/v1/web_backend/connections/list_all`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Get a connection
 */
export const webBackendGetConnection = (
  webBackendConnectionRequestBody: WebBackendConnectionRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionRead>(
    {
      url: `/v1/web_backend/connections/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendConnectionRequestBody,
    },
    options,
  );
};

/**
 * @summary Create a connection
 */
export const webBackendCreateConnection = (
  webBackendConnectionCreate: WebBackendConnectionCreate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionRead>(
    {
      url: `/v1/web_backend/connections/create`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendConnectionCreate,
    },
    options,
  );
};

/**
 * @summary Update a connection
 */
export const webBackendUpdateConnection = (
  webBackendConnectionUpdate: WebBackendConnectionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionRead>(
    {
      url: `/v1/web_backend/connections/update`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendConnectionUpdate,
    },
    options,
  );
};

/**
 * @summary Update a connection
 */
export const webBackendUpdateConnectionNew = (
  webBackendConnectionUpdate: WebBackendConnectionUpdate,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionRead>(
    {
      url: `/v1/web_backend/connections/updateNew`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendConnectionUpdate,
    },
    options,
  );
};

/**
 * @summary Search connections
 */
export const webBackendSearchConnections = (
  webBackendConnectionSearch: WebBackendConnectionSearch,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendConnectionReadList>(
    {
      url: `/v1/web_backend/connections/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendConnectionSearch,
    },
    options,
  );
};

/**
 * @summary Fetch the current state type for a connection.
 */
export const getStateType = (
  connectionIdRequestBody: ConnectionIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ConnectionStateType>(
    {
      url: `/v1/web_backend/state/get_type`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: connectionIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Returns the current state of a workspace
 */
export const webBackendGetWorkspaceState = (
  webBackendWorkspaceState: WebBackendWorkspaceState,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<WebBackendWorkspaceStateResult>(
    {
      url: `/v1/web_backend/workspace/state`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: webBackendWorkspaceState,
    },
    options,
  );
};

/**
 * @summary Returns recent jobs for a connection. Jobs are returned in descending order by createdAt.
 */
export const listJobsFor = (
  jobListRequestBody: JobListRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobReadList>(
    {
      url: `/v1/jobs/list`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: jobListRequestBody,
    },
    options,
  );
};

/**
 * @summary Get information about a job
 */
export const getJobInfo = (
  jobIdRequestBody: JobIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobInfoRead>(
    {
      url: `/v1/jobs/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: jobIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Cancels a job
 */
export const cancelJob = (
  jobIdRequestBody: JobIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobInfoRead>(
    {
      url: `/v1/jobs/cancel`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: jobIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Gets all information needed to debug this job
 */
export const getJobDebugInfo = (
  jobIdRequestBody: JobIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<JobDebugInfoRead>(
    {
      url: `/v1/jobs/get_debug_info`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: jobIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Health Check
 */
export const getHealthCheck = (
  options?: SecondParameter<typeof apiOverride>,
  signal?: AbortSignal,
) => {
  return apiOverride<HealthCheckRead>(
    { url: `/v1/health`, method: 'get', signal },
    options,
  );
};

/**
 * @summary Get logs
 */
export const getLogs = (
  logsRequestBody: LogsRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<Blob>(
    {
      url: `/v1/logs/get`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: logsRequestBody,
      responseType: 'blob',
    },
    options,
  );
};

/**
 * @summary Returns the openapi specification
 */
export const getOpenApiSpec = (
  options?: SecondParameter<typeof apiOverride>,
  signal?: AbortSignal,
) => {
  return apiOverride<Blob>(
    { url: `/v1/openapi`, method: 'get', signal, responseType: 'blob' },
    options,
  );
};

/**
 * @summary Export Airbyte Configuration and Data Archive
 */
export const exportArchive = (
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<AirbyteArchive>(
    { url: `/v1/deployment/export`, method: 'post' },
    options,
  );
};

/**
 * @summary Import Airbyte Configuration and Data Archive
 */
export const importArchive = (
  airbyteArchive: AirbyteArchive,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ImportRead>(
    {
      url: `/v1/deployment/import`,
      method: 'post',
      headers: { 'Content-Type': 'application/x-gzip' },
      data: airbyteArchive,
    },
    options,
  );
};

/**
 * @summary Export Airbyte Workspace Configuration
 */
export const exportWorkspace = (
  workspaceIdRequestBody: WorkspaceIdRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<AirbyteArchive>(
    {
      url: `/v1/deployment/export_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: workspaceIdRequestBody,
    },
    options,
  );
};

/**
 * @summary Upload a GZIP archive tarball and stage it in the server's cache as a temporary resource
 */
export const uploadArchiveResource = (
  airbyteArchive: AirbyteArchive,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<UploadRead>(
    {
      url: `/v1/deployment/upload_archive_resource`,
      method: 'post',
      headers: { 'Content-Type': 'application/x-gzip' },
      data: airbyteArchive,
    },
    options,
  );
};

/**
 * @summary Import Airbyte Configuration into Workspace (this operation might change ids of imported configurations). Note, in order to use this api endpoint, you might need to upload a temporary archive resource with 'deployment/upload_archive_resource' first

 */
export const importIntoWorkspace = (
  importRequestBody: ImportRequestBody,
  options?: SecondParameter<typeof apiOverride>,
) => {
  return apiOverride<ImportRead>(
    {
      url: `/v1/deployment/import_into_workspace`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: importRequestBody,
    },
    options,
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type CreateWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof createWorkspace>>
>;
export type DeleteWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorkspace>>
>;
export type ListWorkspacesResult = NonNullable<
  Awaited<ReturnType<typeof listWorkspaces>>
>;
export type GetWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspace>>
>;
export type GetWorkspaceBySlugResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspaceBySlug>>
>;
export type UpdateWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof updateWorkspace>>
>;
export type UpdateWorkspaceNameResult = NonNullable<
  Awaited<ReturnType<typeof updateWorkspaceName>>
>;
export type UpdateWorkspaceFeedbackResult = NonNullable<
  Awaited<ReturnType<typeof updateWorkspaceFeedback>>
>;
export type TryNotificationConfigResult = NonNullable<
  Awaited<ReturnType<typeof tryNotificationConfig>>
>;
export type CreateSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof createSourceDefinition>>
>;
export type UpdateSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof updateSourceDefinition>>
>;
export type ListSourceDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listSourceDefinitions>>
>;
export type ListLatestSourceDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listLatestSourceDefinitions>>
>;
export type GetSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof getSourceDefinition>>
>;
export type DeleteSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof deleteSourceDefinition>>
>;
export type ListPrivateSourceDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listPrivateSourceDefinitions>>
>;
export type ListSourceDefinitionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listSourceDefinitionsForWorkspace>>
>;
export type CreateCustomSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof createCustomSourceDefinition>>
>;
export type GetSourceDefinitionForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof getSourceDefinitionForWorkspace>>
>;
export type UpdateCustomSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof updateCustomSourceDefinition>>
>;
export type DeleteCustomSourceDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomSourceDefinition>>
>;
export type GrantSourceDefinitionToWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof grantSourceDefinitionToWorkspace>>
>;
export type RevokeSourceDefinitionFromWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof revokeSourceDefinitionFromWorkspace>>
>;
export type GetSourceDefinitionSpecificationResult = NonNullable<
  Awaited<ReturnType<typeof getSourceDefinitionSpecification>>
>;
export type CreateSourceResult = NonNullable<
  Awaited<ReturnType<typeof createSource>>
>;
export type UpdateSourceResult = NonNullable<
  Awaited<ReturnType<typeof updateSource>>
>;
export type ListSourcesForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listSourcesForWorkspace>>
>;
export type GetSourceResult = NonNullable<
  Awaited<ReturnType<typeof getSource>>
>;
export type SearchSourcesResult = NonNullable<
  Awaited<ReturnType<typeof searchSources>>
>;
export type CloneSourceResult = NonNullable<
  Awaited<ReturnType<typeof cloneSource>>
>;
export type DeleteSourceResult = NonNullable<
  Awaited<ReturnType<typeof deleteSource>>
>;
export type CheckConnectionToSourceResult = NonNullable<
  Awaited<ReturnType<typeof checkConnectionToSource>>
>;
export type CheckConnectionToSourceForUpdateResult = NonNullable<
  Awaited<ReturnType<typeof checkConnectionToSourceForUpdate>>
>;
export type DiscoverSchemaForSourceResult = NonNullable<
  Awaited<ReturnType<typeof discoverSchemaForSource>>
>;
export type CreateDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof createDestinationDefinition>>
>;
export type UpdateDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof updateDestinationDefinition>>
>;
export type ListDestinationDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listDestinationDefinitions>>
>;
export type ListLatestDestinationDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listLatestDestinationDefinitions>>
>;
export type GetDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof getDestinationDefinition>>
>;
export type DeleteDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof deleteDestinationDefinition>>
>;
export type ListPrivateDestinationDefinitionsResult = NonNullable<
  Awaited<ReturnType<typeof listPrivateDestinationDefinitions>>
>;
export type ListDestinationDefinitionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listDestinationDefinitionsForWorkspace>>
>;
export type CreateCustomDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof createCustomDestinationDefinition>>
>;
export type GetDestinationDefinitionForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof getDestinationDefinitionForWorkspace>>
>;
export type UpdateCustomDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof updateCustomDestinationDefinition>>
>;
export type DeleteCustomDestinationDefinitionResult = NonNullable<
  Awaited<ReturnType<typeof deleteCustomDestinationDefinition>>
>;
export type GrantDestinationDefinitionToWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof grantDestinationDefinitionToWorkspace>>
>;
export type RevokeDestinationDefinitionFromWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof revokeDestinationDefinitionFromWorkspace>>
>;
export type GetDestinationDefinitionSpecificationResult = NonNullable<
  Awaited<ReturnType<typeof getDestinationDefinitionSpecification>>
>;
export type CreateDestinationResult = NonNullable<
  Awaited<ReturnType<typeof createDestination>>
>;
export type UpdateDestinationResult = NonNullable<
  Awaited<ReturnType<typeof updateDestination>>
>;
export type ListDestinationsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listDestinationsForWorkspace>>
>;
export type GetDestinationResult = NonNullable<
  Awaited<ReturnType<typeof getDestination>>
>;
export type SearchDestinationsResult = NonNullable<
  Awaited<ReturnType<typeof searchDestinations>>
>;
export type CheckConnectionToDestinationResult = NonNullable<
  Awaited<ReturnType<typeof checkConnectionToDestination>>
>;
export type CheckConnectionToDestinationForUpdateResult = NonNullable<
  Awaited<ReturnType<typeof checkConnectionToDestinationForUpdate>>
>;
export type DeleteDestinationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDestination>>
>;
export type CloneDestinationResult = NonNullable<
  Awaited<ReturnType<typeof cloneDestination>>
>;
export type CreateConnectionResult = NonNullable<
  Awaited<ReturnType<typeof createConnection>>
>;
export type UpdateConnectionResult = NonNullable<
  Awaited<ReturnType<typeof updateConnection>>
>;
export type ListConnectionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listConnectionsForWorkspace>>
>;
export type ListAllConnectionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof listAllConnectionsForWorkspace>>
>;
export type GetConnectionResult = NonNullable<
  Awaited<ReturnType<typeof getConnection>>
>;
export type GetStateResult = NonNullable<Awaited<ReturnType<typeof getState>>>;
export type SearchConnectionsResult = NonNullable<
  Awaited<ReturnType<typeof searchConnections>>
>;
export type DeleteConnectionResult = NonNullable<
  Awaited<ReturnType<typeof deleteConnection>>
>;
export type SyncConnectionResult = NonNullable<
  Awaited<ReturnType<typeof syncConnection>>
>;
export type ResetConnectionResult = NonNullable<
  Awaited<ReturnType<typeof resetConnection>>
>;
export type CheckOperationResult = NonNullable<
  Awaited<ReturnType<typeof checkOperation>>
>;
export type CreateOperationResult = NonNullable<
  Awaited<ReturnType<typeof createOperation>>
>;
export type UpdateOperationResult = NonNullable<
  Awaited<ReturnType<typeof updateOperation>>
>;
export type ListOperationsForConnectionResult = NonNullable<
  Awaited<ReturnType<typeof listOperationsForConnection>>
>;
export type GetOperationResult = NonNullable<
  Awaited<ReturnType<typeof getOperation>>
>;
export type DeleteOperationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOperation>>
>;
export type ExecuteSourceCheckConnectionResult = NonNullable<
  Awaited<ReturnType<typeof executeSourceCheckConnection>>
>;
export type ExecuteSourceDiscoverSchemaResult = NonNullable<
  Awaited<ReturnType<typeof executeSourceDiscoverSchema>>
>;
export type ExecuteDestinationCheckConnectionResult = NonNullable<
  Awaited<ReturnType<typeof executeDestinationCheckConnection>>
>;
export type ListMigrationsResult = NonNullable<
  Awaited<ReturnType<typeof listMigrations>>
>;
export type ExecuteMigrationsResult = NonNullable<
  Awaited<ReturnType<typeof executeMigrations>>
>;
export type SetInstancewideSourceOauthParamsResult = NonNullable<
  Awaited<ReturnType<typeof setInstancewideSourceOauthParams>>
>;
export type GetSourceOAuthConsentResult = NonNullable<
  Awaited<ReturnType<typeof getSourceOAuthConsent>>
>;
export type CompleteSourceOAuthResult = NonNullable<
  Awaited<ReturnType<typeof completeSourceOAuth>>
>;
export type GetDestinationOAuthConsentResult = NonNullable<
  Awaited<ReturnType<typeof getDestinationOAuthConsent>>
>;
export type CompleteDestinationOAuthResult = NonNullable<
  Awaited<ReturnType<typeof completeDestinationOAuth>>
>;
export type SetInstancewideDestinationOauthParamsResult = NonNullable<
  Awaited<ReturnType<typeof setInstancewideDestinationOauthParams>>
>;
export type WebBackendListConnectionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof webBackendListConnectionsForWorkspace>>
>;
export type WebBackendListAllConnectionsForWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof webBackendListAllConnectionsForWorkspace>>
>;
export type WebBackendGetConnectionResult = NonNullable<
  Awaited<ReturnType<typeof webBackendGetConnection>>
>;
export type WebBackendCreateConnectionResult = NonNullable<
  Awaited<ReturnType<typeof webBackendCreateConnection>>
>;
export type WebBackendUpdateConnectionResult = NonNullable<
  Awaited<ReturnType<typeof webBackendUpdateConnection>>
>;
export type WebBackendUpdateConnectionNewResult = NonNullable<
  Awaited<ReturnType<typeof webBackendUpdateConnectionNew>>
>;
export type WebBackendSearchConnectionsResult = NonNullable<
  Awaited<ReturnType<typeof webBackendSearchConnections>>
>;
export type GetStateTypeResult = NonNullable<
  Awaited<ReturnType<typeof getStateType>>
>;
export type WebBackendGetWorkspaceStateResult = NonNullable<
  Awaited<ReturnType<typeof webBackendGetWorkspaceState>>
>;
export type ListJobsForResult = NonNullable<
  Awaited<ReturnType<typeof listJobsFor>>
>;
export type GetJobInfoResult = NonNullable<
  Awaited<ReturnType<typeof getJobInfo>>
>;
export type CancelJobResult = NonNullable<
  Awaited<ReturnType<typeof cancelJob>>
>;
export type GetJobDebugInfoResult = NonNullable<
  Awaited<ReturnType<typeof getJobDebugInfo>>
>;
export type GetHealthCheckResult = NonNullable<
  Awaited<ReturnType<typeof getHealthCheck>>
>;
export type GetLogsResult = NonNullable<Awaited<ReturnType<typeof getLogs>>>;
export type GetOpenApiSpecResult = NonNullable<
  Awaited<ReturnType<typeof getOpenApiSpec>>
>;
export type ExportArchiveResult = NonNullable<
  Awaited<ReturnType<typeof exportArchive>>
>;
export type ImportArchiveResult = NonNullable<
  Awaited<ReturnType<typeof importArchive>>
>;
export type ExportWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof exportWorkspace>>
>;
export type UploadArchiveResourceResult = NonNullable<
  Awaited<ReturnType<typeof uploadArchiveResource>>
>;
export type ImportIntoWorkspaceResult = NonNullable<
  Awaited<ReturnType<typeof importIntoWorkspace>>
>;
